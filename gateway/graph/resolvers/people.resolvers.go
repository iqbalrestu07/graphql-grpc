package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"graph-bp/gateway/graph/generated"
	"graph-bp/gateway/graph/model"
	epul "graph-bp/services/epul/grpc"

	"google.golang.org/protobuf/types/known/emptypb"
)

// CreatePeople is the resolver for the createPeople field.
func (r *mutationResolver) CreatePeople(ctx context.Context, input model.NewPeople) (*model.People, error) {
	resp, err := r.EpulClient.AddPeople(ctx, &epul.People{
		Name:  *input.Name,
		Age:   int32(*input.Age),
		Phone: *input.Phone,
		Address: &epul.Address{
			Province: *input.Address.Province,
			City:     *input.Address.City,
		},
	})
	if err != nil {
		return nil, err
	}
	age := int(resp.Age)
	p := model.People{
		Name:  &resp.Name,
		Age:   &age,
		Phone: &resp.Phone,
		Address: &model.Address{
			Province: &resp.Address.Province,
			City:     &resp.Address.City,
		},
	}
	return &p, nil
}

// Peoples is the resolver for the peoples field.
func (r *queryResolver) Peoples(ctx context.Context) (peoples []*model.People, err error) {
	resp, err := r.EpulClient.ListPeople(ctx, &emptypb.Empty{})
	if err != nil {
		return nil, err
	}
	for _, v := range resp.Peoples {
		name := v.GetName()
		add := v.GetAddress()
		age := int(v.GetAge())
		phone := v.GetPhone()
		peoples = append(peoples, &model.People{
			Name:  &name,
			Age:   &age,
			Phone: &phone,
			Address: &model.Address{
				Province: &add.Province,
				City:     &add.City,
			},
		})
	}
	return peoples, nil
}

// People is the resolver for the people field.
func (r *queryResolver) People(ctx context.Context, name string) (people *model.People, err error) {
	resp, err := r.EpulClient.DetailPeople(ctx, &epul.People{Name: name})
	if err != nil {
		return nil, err
	}
	age := int(resp.GetAge())
	people = &model.People{
		Name:  &resp.Name,
		Age:   &age,
		Phone: &resp.Phone,
		Address: &model.Address{
			Province: &resp.Address.Province,
			City:     &resp.Address.City,
		},
	}
	return people, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
